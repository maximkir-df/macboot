---

- name: Ensuring Homebrew Is Installed
  ansible.builtin.stat:
    path: "{{ brew_path }}"
  register: homebrew_check

- name: Fail If Homebrew Is Not Installed and install_homebrew_if_missing Is False
  ansible.builtin.fail:
    msg: "Homebrew is missing...Install from http://brew.sh/"
  when: >
        not homebrew_check.stat.exists and
        not install_homebrew_if_missing

- name: Installing Homebrew
  ansible.builtin.shell: >
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  register: brew_install_output
  changed_when: brew_install_output.rc != 0
  when: >
      not homebrew_check.stat.exists and
      install_homebrew_if_missing

- name: Print Homebrew Installation Output
  ansible.builtin.debug:
    msg: "{{ brew_install_output }}"

- name: Updating Homebrew
  community.general.homebrew:
    update_homebrew: true
  when: homebrew_check.stat.exists

- name: Adding taps to homebrew
  community.general.homebrew_tap:
    tap: '{{ item }}'
    state: present
  with_items: '{{ homebrew_taps + homebrew_taps_user | default([]) }}'

- name: Install mac-specific homebrew packages
  community.general.homebrew:
    name: '{{ item }}'
    state: present
  with_items: '{{ homebrew_installed_packages + homebrew_installed_packages_user | default([]) }}'

- name: Install apps with homebrew cask
  community.general.homebrew_cask:
    name: '{{ item }}'
    state: present
    accept_external_apps: true
  with_items: '{{ homebrew_cask_apps + homebrew_cask_apps_user | default([]) }}'

- name: Start MongoDB
  when: "'mongodb-community' in homebrew_installed_packages"
  ansible.builtin.command: "{{ brew_path }} services start mongodb-community"
  register: cmd_output
  changed_when: cmd_output.rc != 0
